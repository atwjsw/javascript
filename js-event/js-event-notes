js-event-notes

# 事件流
冒泡： 自下而上
捕获：自上而下

# 事件处理程序

1）HTML事件处理程序
- 事件是直接加载在HTML结构里的
- 例如 <input type="button" value="按钮" id="btn" onclick="showMessage()">
- 缺点：HTML代码与JS代码紧密耦合，修改代码要在JS和HTML两处修改。 

2）DOM 0级事件处理程序
- 传统方式：把一个函数赋值给一个元素的事件处理属性
- 例如:
		var btn3 = document.getElementById('btn3');
		btn3.onclick = function() {
			alert("Hello Event from DOM0级事件处理程序");
		}
- 优点：跨浏览器支持好，使用简单，不存在1）的问题
- dom0级添加多个事件实际只能出现最后定义的事件，前面定义的事件都会被覆盖。

3) DOM 2级事件处理程序
- 添加和删除事件监听器的方法
- addEventListener()和removeEventListerner()
- 参数：待处理事件名，处理函数，布尔值（false=冒泡，true=捕获）
- 优点： 单个事件可以添加多个处理程序

4）IE事件处理程序（Opera也是）
- IE不支持DOM2，需要使用自己的事件处理程序
- attachEvent() 和 detachEvent()
- 参数：待处理事件名，处理函数 （IE8及更早版本只支持冒泡）

5) 跨浏览器处理
- 使用能力检测, 按照DOM2级支持，IE支持，DOM0级支持的顺序，依次处理

# 事件对象
- event： 在触发DOM元素事件时都会产生一个对象
- 事件对象event： 包含事件相关的各种信息

1） DOM事件类型：
- type属性： 用于获取事件类型
- target属性：用于获取事件目标
- stopPropagation() 方法：阻止事件冒泡
- preventDefault() 方法：阻止默认行为。例如点击A标签不让其跳转。

2) IE事件属性
- event ： window.event
- type属性： 用于获取事件类型
- srcElement属性：用于获取事件目标
- cancelBubble属性：true 阻止事件冒泡
- returnValue属性：false 阻止默认行为

# 事件类型
- 鼠标事件： click，mouseover， mouseout， mousemove

-键盘事件
keyDown: 当用户按下键盘上的“任意键”时触发，而且如果按住不放的话，会重复触发。

KeyPress: 当用户按下键盘上的“字符键”时触发，而且如果按住不放的话，会重复触发。

KeyUp: 当用户释放键盘上的键时触发。

- 例如微博每次输入都告诉你还剩多少文字可以输入，就是要依靠键盘事件来实现。

